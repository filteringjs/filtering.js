{"version":3,"file":"index.js","mappings":"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","sources":["webpack://filteringjs/webpack/universalModuleDefinition","webpack://filteringjs/webpack/bootstrap","webpack://filteringjs/webpack/runtime/define property getters","webpack://filteringjs/webpack/runtime/hasOwnProperty shorthand","webpack://filteringjs/webpack/runtime/make namespace object","webpack://filteringjs/./src/result.ts","webpack://filteringjs/./src/utils.ts","webpack://filteringjs/./src/filtering.ts","webpack://filteringjs/./src/schema.ts","webpack://filteringjs/./src/parser.ts","webpack://filteringjs/./src/helper.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"filteringjs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"filteringjs\"] = factory();\n\telse\n\t\troot[\"filteringjs\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Filter, Group, Item, Schema} from \"./schema\";\n\nexport class Result {\n    readonly #schema: Schema;\n    readonly #groups = new Map<string, GroupResult>();\n\n    #filteredItems = new Set<Item>();\n    #allItems = new Set<Item>();\n\n    constructor(schema: Schema) {\n        this.#schema = schema;\n    }\n\n    get schema(): Schema {\n        return this.#schema;\n    }\n\n    get groups(): GroupResult[] {\n        return [...this.#groups.values()];\n    }\n\n    get groupNames(): string[] {\n        return [...this.#groups.keys()];\n    }\n\n    addGroup(groupResult: GroupResult) {\n        this.#groups.set(groupResult.schemaGroup.name, groupResult);\n    }\n\n    getGroup(groupName: string) {\n        return this.#groups.get(groupName);\n    }\n\n    get filteredItems() {\n        return [...this.#filteredItems];\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addFilteredItem(item);\n        }\n    }\n\n    get allItems() {\n        return [...this.#allItems];\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addAllItem(item);\n        }\n    }\n}\n\nexport class GroupResult {\n    readonly #schemaGroup: Group;\n\n    #filters = new Map<string, FilterResult>();\n\n    #filteredItems = new Set<Item>();\n    #allItems = new Set<Item>();\n\n    constructor(schemaGroup: Group) {\n        this.#schemaGroup = schemaGroup;\n    }\n\n    get schemaGroup(): Group {\n        return this.#schemaGroup;\n    }\n\n    get filters(): FilterResult[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filterResult: FilterResult) {\n        this.#filters.set(filterResult.schemaFilter.name, filterResult);\n    }\n\n    getFilter(filterName: string) {\n        return this.#filters.get(filterName);\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addFilteredItem(item);\n        }\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addAllItem(item);\n        }\n    }\n}\n\nexport class FilterResult {\n    readonly #schemaFilter: Filter;\n\n    #filteredItems = new Set<Item>();\n    #possibleItems = new Set<Item>();\n    #allItems = new Set<Item>();\n\n    constructor(schemaFilter: Filter) {\n        this.#schemaFilter = schemaFilter;\n    }\n\n    get schemaFilter() {\n        return this.#schemaFilter;\n    }\n\n    get filteredItems() {\n        return [...this.#filteredItems];\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n    }\n\n    get possibleItems() {\n        return [...this.#possibleItems];\n    }\n\n    addPossibleItem(item: Item) {\n        this.#possibleItems.add(item);\n    }\n\n    get allItems() {\n        return [...this.#allItems];\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n    }\n}\n","export interface Pojo {\n    [key: string]: any;\n}\n\nexport function findOne<Type>(haystack: Set<Type>, values: Set<Type>) {\n    for (const v of values) {\n        if (haystack.has(v)) {\n            return true;\n        }\n    }\n    return false;\n}\n","import {FilterData, Item, Schema} from \"./schema\";\nimport {FilterResult, GroupResult, Result} from \"./result\";\nimport {findOne} from \"./utils\";\n\nexport class Filtering {\n\n    readonly #schema: Schema;\n    readonly #options: FilteringOptions;\n\n    constructor(data: Schema, options: FilteringOptions = {}) {\n        this.#schema = data;\n        this.#options = options;\n    }\n\n    filter(filterData: FilterData): Result {\n        const result = this.#createEmptyResult(this.#schema);\n\n        let relevantItems: Item[] = [];\n        if (this.#options.filterItem) {\n            for (const item of this.#schema.items) {\n                if (this.#options.filterItem(item, this.#schema, filterData)) {\n                    relevantItems.push(item);\n                }\n            }\n        } else {\n            relevantItems = [...this.#schema.items];\n        }\n        for (const item of relevantItems) {\n            result.addAllItem(item);\n        }\n        for (const item of this.#getFilterItems(relevantItems, filterData)) {\n            result.addFilteredItem(item);\n        }\n        this.#calculatePossibleItems(result, relevantItems, filterData);\n\n        return result;\n    }\n\n    #createEmptyResult(schema: Schema) {\n        const result = new Result(schema);\n        for (const group of schema.groups) {\n            const groupResult = new GroupResult(group);\n            for (const filter of group.filters) {\n                const filterResult = new FilterResult(filter);\n                groupResult.addFilter(filterResult);\n            }\n            result.addGroup(groupResult);\n        }\n        return result;\n    }\n\n    #calculatePossibleItems(result: Result, items: Item[], filterData: FilterData) {\n        for (const groupName of result.groupNames) {\n            const possibleFilterData = filterData.clone();\n            possibleFilterData.disableGroup(groupName);\n\n            const filteredItems = this.#getFilterItems(items, possibleFilterData);\n            for (const filteredItem of filteredItems) {\n                for (const filteredItemFilterName of filteredItem.getFilterNames(groupName)) {\n                    result.getGroup(groupName).getFilter(filteredItemFilterName).addPossibleItem(filteredItem);\n                }\n            }\n        }\n    }\n\n    #getFilterItems(items: Item[], filterData: FilterData) {\n        const result = new Set<Item>();\n\n        for (const item of items) {\n            let filtered = true;\n\n            for (const [groupName, checkedFilters] of filterData.checkedFilters) {\n                if (checkedFilters.size > 0 && !findOne(item.getFilterNames(groupName), checkedFilters)) {\n                    filtered = false;\n                    break;\n                }\n            }\n\n            if (filtered) {\n                result.add(item);\n            }\n        }\n\n        return result;\n    }\n}\n\nexport interface FilteringOptions {\n    filterItem?(item: Item, schema: Schema, filterData: FilterData): boolean,\n}\n","import {Pojo} from \"./utils\";\n\nexport class Schema {\n    #groups: Map<string, Group> = new Map();\n    #items: Item[] = [];\n    #data?: Pojo;\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get groups(): Group[] {\n        return [...this.#groups.values()];\n    }\n\n    get items(): Item[] {\n        return this.#items;\n    }\n\n    addGroup(group: Group) {\n        if (this.#groups.has(group.name)) {\n            throw new Error(`Group with name ${group.name} already added to schema. Group names have to be unique.`);\n        }\n        this.#groups.set(group.name, group);\n    }\n\n    addItem(item: Item) {\n        this.#items.push(item);\n    }\n\n    addItems(items: Item[]) {\n        for (const item of items) {\n            this.addItem(item);\n        }\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Group {\n    #name: string;\n    #filters: Map<string, Filter> = new Map();\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get filters(): Filter[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filter: Filter) {\n        if (this.#filters.has(filter.name)) {\n            throw new Error(`Filter with name ${filter.name} already in group ${this.name}. Filter names have to be unique in a Group.`);\n        }\n        this.#filters.set(filter.name, filter);\n    }\n\n    getFilterNames() {\n        return new Set(this.#filters.keys());\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Filter {\n    #name: string;\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Item {\n    #data?: Pojo;\n    #groups = new Map<string, Set<string>>();\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n\n    getGroupNames(): Set<string> {\n        return new Set(this.#groups.keys());\n    }\n\n    addFilter(groupName: string, filterName: string) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    #getFiltersFromGroup(groupName: string) {\n        if (!this.#groups.has(groupName)) {\n            this.#groups.set(groupName, new Set());\n        }\n        return this.#groups.get(groupName);\n    }\n\n    getFilterNames(groupName: string): Set<string> {\n        if (this.#groups.has(groupName)) {\n            return new Set(this.#groups.get(groupName));\n        } else {\n            return new Set();\n        }\n    }\n}\n\nexport class FilterData {\n    #checkedFilters: Map<string, Set<string | Symbol>> = new Map();\n\n    get checkedFilters() {\n        return this.#checkedFilters;\n    }\n\n    checkFilter(groupName: string, filterName: string | Symbol) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    checkAllFilters(groupName: string) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.clear();\n    }\n\n    #getFiltersFromGroup(groupName: string) {\n        if (!this.#checkedFilters.has(groupName)) {\n            this.#checkedFilters.set(groupName, new Set());\n        }\n        return this.#checkedFilters.get(groupName);\n    }\n\n    disableGroup(groupName: string) {\n        this.#checkedFilters.delete(groupName);\n    }\n\n    clone() {\n        const filterData = new FilterData();\n        for (const [groupName, filterNames] of this.#checkedFilters.entries()) {\n            for (const filterName of filterNames) {\n                filterData.checkFilter(groupName, filterName);\n            }\n        }\n        return filterData;\n    }\n}\n","import {Filter, FilterData, Group, Item, Schema} from \"./schema\";\n\nexport interface ParserOptions {\n    groupClass?: string,\n    filterClass?: string,\n    itemClass?: string,\n    itemFilterNameAttributePrefix?: string,\n    filterCheckedClass?: string,\n}\n\nexport class Parser {\n\n    static readonly #defaultOptions: ParserOptions = {\n        groupClass: 'filtering-group',\n        filterClass: 'filtering-filter',\n        itemClass: 'filtering-item',\n        itemFilterNameAttributePrefix: 'data-filter',\n        filterCheckedClass: 'checked',\n    }\n\n    readonly #options: ParserOptions;\n\n    constructor(options: ParserOptions = {}) {\n        this.#options = {...Parser.#defaultOptions, ...options};\n    }\n\n    get options(): ParserOptions {\n        return this.#options;\n    }\n\n    parseSchemaFromHtml(element: HTMLElement, schema: Schema = new Schema()) {\n        this.parseGroupsAndFiltersFromHtml(element, schema);\n        for (const item of this.parseItemsFromHtml(element)) {\n            schema.addItem(item);\n        }\n        return schema;\n    }\n\n    parseGroupsAndFiltersFromHtml(element: HTMLElement, schema: Schema) {\n        for (const groupElement of element.getElementsByClassName(this.#options.groupClass) as HTMLCollectionOf<HTMLElement>) {\n            const groupName = groupElement.dataset.groupName;\n            if (groupName === undefined) {\n                continue;\n            }\n            const group = new Group(groupName, {\n                element: groupElement,\n                label: groupElement.dataset.groupLabel,\n            });\n\n            for (const filterElement of groupElement.getElementsByClassName(this.#options.filterClass) as HTMLCollectionOf<HTMLElement>) {\n                const filterName = filterElement.dataset.filterName;\n                if (filterName === undefined) {\n                    continue;\n                }\n                const filter = new Filter(filterName, {\n                    element: filterElement,\n                    label: filterElement.dataset.filterLabel,\n                });\n\n                group.addFilter(filter);\n            }\n            schema.addGroup(group);\n        }\n    }\n\n    parseItemsFromHtml(element: HTMLElement) {\n        const items: Item[] = [];\n\n        const attributeRegex = new RegExp(`${this.#options.itemFilterNameAttributePrefix}-(?<groupName>.+)`, 'i');\n        for (const itemElement of element.getElementsByClassName(this.#options.itemClass) as HTMLCollectionOf<HTMLElement>) {\n            const item = new Item({\n                element: itemElement\n            });\n            for (const {name: attributeName, value: filterNames} of itemElement.attributes) {\n                const match = attributeName.match(attributeRegex);\n                if (match) {\n                    const {groupName} = match.groups;\n                    for (const filterName of filterNames.split(/\\s*,\\s*/)) {\n                        item.addFilter(groupName, filterName);\n                    }\n                }\n            }\n            items.push(item);\n        }\n        return items;\n    }\n\n    parseCheckedFilterDataFromHtml(element: HTMLElement) {\n        const filterData = new FilterData();\n        for (const groupElement of element.getElementsByClassName(this.#options.groupClass) as HTMLCollectionOf<HTMLElement>) {\n            const groupName = groupElement.dataset.groupName;\n\n            for (const filterElement of groupElement.getElementsByClassName(this.#options.filterClass) as HTMLCollectionOf<HTMLElement>) {\n                const filterName = filterElement.dataset.filterName;\n\n                if (filterElement.classList.contains(this.#options.filterCheckedClass)) {\n                    filterData.checkFilter(groupName, filterName);\n                }\n            }\n        }\n        return filterData;\n    }\n}\n","import {Schema} from \"./schema\";\nimport {Parser, ParserOptions} from \"./parser\";\nimport {Filtering, FilteringOptions} from \"./filtering\";\n\nexport class FilteringFlow {\n\n    readonly options: FilteringFlowOptions;\n    static readonly defaultOptions: FilteringFlowOptions = {\n        triggerFilterAfterInitializing: true,\n        disabledFilterClass: 'disabled',\n        filteredItemClass: 'filtered',\n    }\n\n    readonly root: HTMLElement;\n    schema: Schema;\n    parser: Parser;\n    filtering: Filtering;\n\n    constructor(root: HTMLElement, options: FilteringFlowOptions = {}) {\n        this.root = root;\n        this.options = {...FilteringFlow.defaultOptions, ...options};\n\n        this.initializeParser();\n        this.initializeSchema();\n        this.initializeFiltering();\n        this.initializeFilterListener();\n\n        if (this.options.triggerFilterAfterInitializing) {\n            this.filter();\n        }\n    }\n\n    initializeParser(parserOptions?: ParserOptions) {\n        this.parser = new Parser(parserOptions);\n        return this.parser;\n    }\n\n    initializeSchema() {\n        this.schema = this.parser.parseSchemaFromHtml(this.root);\n        return this.schema;\n    }\n\n    initializeFiltering(filteringOptions?: FilteringOptions) {\n        this.filtering = new Filtering(this.schema, filteringOptions);\n        return this.filtering;\n    }\n\n    initializeFilterListener() {\n        for (const filterElement of this.root.getElementsByClassName(this.parser.options.filterClass) as HTMLCollectionOf<HTMLElement>) {\n            filterElement.addEventListener('click', (event) => {\n                event.preventDefault();\n                if (filterElement.classList.contains(this.options.disabledFilterClass)) {\n                    // Ignore click if the filter would give 0 results\n                    return;\n                }\n                if (this.beforeFilter(filterElement)) {\n                    filterElement.classList.toggle(this.parser.options.filterCheckedClass); // Check or uncheck filter\n                    this.filter();\n                }\n            });\n        }\n    }\n\n    beforeFilter(filterElement: HTMLElement) {\n        return true;\n    }\n\n    filter() {\n        // Parse checked filter from HTML\n        const filterData = this.parser.parseCheckedFilterDataFromHtml(this.root);\n        const result = this.filtering.filter(filterData);\n        for (const group of result.groups) {\n            for (const filter of group.filters) {\n                const filterElement = filter.schemaFilter.data.element;\n                // Disable filter if it would give 0 results\n                filterElement.classList.toggle(this.options.disabledFilterClass, filter.possibleItems.length === 0);\n            }\n        }\n        for (const item of result.allItems) {\n            // Show or hide items\n            item.data.element.classList.toggle(this.options.filteredItemClass, !result.filteredItems.includes(item));\n        }\n        return result;\n    }\n}\n\ninterface FilteringFlowOptions {\n    disabledFilterClass?: string,\n    filteredItemClass?: string,\n    triggerFilterAfterInitializing?: boolean,\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Result","Map","Set","constructor","schema","groups","values","groupNames","keys","addGroup","groupResult","set","schemaGroup","name","getGroup","groupName","filteredItems","addFilteredItem","item","add","getGroupNames","allItems","addAllItem","GroupResult","filters","addFilter","filterResult","schemaFilter","getFilter","filterName","getFilterNames","FilterResult","possibleItems","addPossibleItem","findOne","haystack","v","has","Filtering","data","options","filter","filterData","result","relevantItems","filterItem","items","push","group","possibleFilterData","clone","disableGroup","filteredItem","filteredItemFilterName","filtered","checkedFilters","size","Schema","Error","addItem","addItems","Group","Filter","Item","FilterData","checkFilter","checkAllFilters","clear","delete","filterNames","entries","Parser","static","groupClass","filterClass","itemClass","itemFilterNameAttributePrefix","filterCheckedClass","parseSchemaFromHtml","element","parseGroupsAndFiltersFromHtml","parseItemsFromHtml","groupElement","getElementsByClassName","dataset","undefined","label","groupLabel","filterElement","filterLabel","attributeRegex","RegExp","itemElement","attributeName","attributes","match","split","parseCheckedFilterDataFromHtml","classList","contains","FilteringFlow","triggerFilterAfterInitializing","disabledFilterClass","filteredItemClass","parser","filtering","defaultOptions","initializeParser","initializeSchema","initializeFiltering","initializeFilterListener","parserOptions","filteringOptions","addEventListener","event","preventDefault","beforeFilter","toggle","length","includes"],"sourceRoot":""}
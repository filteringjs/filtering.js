{"version":3,"file":"index.js","mappings":"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","sources":["webpack://filteringjs/webpack/universalModuleDefinition","webpack://filteringjs/webpack/bootstrap","webpack://filteringjs/webpack/runtime/define property getters","webpack://filteringjs/webpack/runtime/hasOwnProperty shorthand","webpack://filteringjs/webpack/runtime/make namespace object","webpack://filteringjs/./src/result.ts","webpack://filteringjs/./src/utils.ts","webpack://filteringjs/./src/filtering.ts","webpack://filteringjs/./src/schema.ts","webpack://filteringjs/./src/parser.ts","webpack://filteringjs/./src/helper.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"filteringjs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"filteringjs\"] = factory();\n\telse\n\t\troot[\"filteringjs\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Filter, Group, Item, Schema} from \"./schema\";\n\nexport class Result {\n    readonly #schema: Schema;\n    readonly #groups = new Map<string, GroupResult>();\n\n    constructor(schema: Schema) {\n        this.#schema = schema;\n\n        this.#initialize();\n    }\n\n    #initialize() {\n        for (const group of this.schema.groups) {\n            const groupResult = new GroupResult(group);\n            for (const filter of group.filters) {\n                const filterResult = new FilterResult(filter);\n                groupResult.addFilter(filterResult);\n            }\n            this.#addGroup(groupResult);\n        }\n    }\n\n    get schema(): Schema {\n        return this.#schema;\n    }\n\n    get groups(): GroupResult[] {\n        return [...this.#groups.values()];\n    }\n\n    get groupNames(): string[] {\n        return [...this.#groups.keys()];\n    }\n\n    #addGroup(groupResult: GroupResult) {\n        this.#groups.set(groupResult.schemaGroup.name, groupResult);\n    }\n\n    getGroup(groupName: string) {\n        return this.#groups.get(groupName);\n    }\n\n    get filteredItems() {\n        const result = new Set<Item>();\n        for (const groupResult of this.groups) {\n            for (const item of groupResult.filteredItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addFilteredItem(item: Item) {\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addFilteredItem(item);\n        }\n    }\n\n    get possibleItems(): Item[] {\n        const result = new Set<Item>();\n        for (const groupResult of this.groups) {\n            for (const item of groupResult.possibleItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    get allItems() {\n        const result = new Set<Item>();\n        for (const groupResult of this.groups) {\n            for (const item of groupResult.allItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addAllItem(item: Item) {\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addAllItem(item);\n        }\n    }\n}\n\nexport class GroupResult {\n    readonly #schemaGroup: Group;\n\n    readonly #filters = new Map<string, FilterResult>();\n\n    constructor(schemaGroup: Group) {\n        this.#schemaGroup = schemaGroup;\n    }\n\n    get schemaGroup(): Group {\n        return this.#schemaGroup;\n    }\n\n    get filters(): FilterResult[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filterResult: FilterResult) {\n        this.#filters.set(filterResult.schemaFilter.name, filterResult);\n    }\n\n    getFilter(filterName: string) {\n        return this.#filters.get(filterName);\n    }\n\n    get filteredItems(): Item[] {\n        const result = new Set<Item>();\n        for (const filterResult of this.filters) {\n            for (const item of filterResult.filteredItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addFilteredItem(item: Item) {\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addFilteredItem(item);\n        }\n    }\n\n    get possibleItems(): Item[] {\n        const result = new Set<Item>();\n        for (const filterResult of this.filters) {\n            for (const item of filterResult.possibleItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    get allItems(): Item[] {\n        const result = new Set<Item>();\n        for (const filterResult of this.filters) {\n            for (const item of filterResult.allItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addAllItem(item: Item) {\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addAllItem(item);\n        }\n    }\n}\n\nexport class FilterResult {\n    readonly #schemaFilter: Filter;\n\n    readonly #filteredItems = new Set<Item>();\n    readonly #possibleItems = new Set<Item>();\n    readonly #allItems = new Set<Item>();\n\n    constructor(schemaFilter: Filter) {\n        this.#schemaFilter = schemaFilter;\n    }\n\n    get schemaFilter() {\n        return this.#schemaFilter;\n    }\n\n    get filteredItems() {\n        return [...this.#filteredItems];\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n        this.addPossibleItem(item);\n        this.addAllItem(item);\n    }\n\n    get possibleItems() {\n        return [...this.#possibleItems];\n    }\n\n    addPossibleItem(item: Item) {\n        this.#possibleItems.add(item);\n        this.addAllItem(item);\n    }\n\n    get allItems() {\n        return [...this.#allItems];\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n    }\n}\n","export interface Pojo {\n    [key: string]: any;\n}\n\nexport function findOne<Type>(haystack: Set<Type>, values: Set<Type>) {\n    for (const v of values) {\n        if (haystack.has(v)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function getProperty(object: any, propertyName: string): any {\n    const parts = propertyName.split('.');\n    let result = object;\n    for (const part of parts) {\n        if (result === undefined) {\n            return undefined;\n        }\n        result = result[part];\n    }\n    return result;\n}\n\nexport function compareStrings(a: string, b: string) {\n    if (a === b) {\n        return 0;\n    } else if (a < b) {\n        return -1;\n    } else {\n        return 1;\n    }\n}\n","import {FilterData, Item, Schema} from \"./schema\";\nimport {FilterResult, GroupResult, Result} from \"./result\";\nimport {findOne} from \"./utils\";\n\nexport class Filtering {\n\n    readonly #schema: Schema;\n    readonly #options: FilteringOptions;\n\n    constructor(data: Schema, options: FilteringOptions = {}) {\n        this.#schema = data;\n        this.#options = options;\n    }\n\n    filter(filterData: FilterData): Result {\n        const result = new Result(this.#schema);\n\n        let relevantItems: Item[] = [];\n        if (this.#options.filterItem) {\n            for (const item of this.#schema.items) {\n                if (this.#options.filterItem(item, this.#schema, filterData)) {\n                    relevantItems.push(item);\n                }\n            }\n        } else {\n            relevantItems = [...this.#schema.items];\n        }\n        for (const item of relevantItems) {\n            result.addAllItem(item);\n        }\n        for (const item of this.#getFilterItems(relevantItems, filterData)) {\n            result.addFilteredItem(item);\n        }\n        this.#calculatePossibleItems(result, relevantItems, filterData);\n\n        return result;\n    }\n\n    #calculatePossibleItems(result: Result, items: Item[], filterData: FilterData) {\n        for (const groupName of result.groupNames) {\n            const possibleFilterData = filterData.clone();\n            possibleFilterData.disableGroup(groupName);\n\n            const filteredItems = this.#getFilterItems(items, possibleFilterData);\n            for (const filteredItem of filteredItems) {\n                for (const filteredItemFilterName of filteredItem.getFilterNames(groupName)) {\n                    result.getGroup(groupName).getFilter(filteredItemFilterName).addPossibleItem(filteredItem);\n                }\n            }\n        }\n    }\n\n    #getFilterItems(items: Item[], filterData: FilterData) {\n        const result = new Set<Item>();\n\n        for (const item of items) {\n            let filtered = true;\n\n            for (const [groupName, checkedFilters] of filterData.checkedFilters) {\n                if (checkedFilters.size > 0 && !findOne(item.getFilterNames(groupName), checkedFilters)) {\n                    filtered = false;\n                    break;\n                }\n            }\n\n            if (filtered) {\n                result.add(item);\n            }\n        }\n\n        return result;\n    }\n}\n\nexport interface FilteringOptions {\n    filterItem?(item: Item, schema: Schema, filterData: FilterData): boolean,\n}\n","import {Pojo} from \"./utils\";\n\nexport class Schema {\n    #groups: Map<string, Group> = new Map();\n    #items: Item[] = [];\n    #data?: Pojo;\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get groups(): Group[] {\n        return [...this.#groups.values()];\n    }\n\n    get items(): Item[] {\n        return this.#items;\n    }\n\n    addGroup(group: Group) {\n        if (this.#groups.has(group.name)) {\n            throw new Error(`Group with name ${group.name} already added to schema. Group names have to be unique.`);\n        }\n        this.#groups.set(group.name, group);\n    }\n\n    addItem(item: Item) {\n        this.#items.push(item);\n    }\n\n    addItems(items: Item[]) {\n        for (const item of items) {\n            this.addItem(item);\n        }\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Group {\n    #name: string;\n    #filters: Map<string, Filter> = new Map();\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get filters(): Filter[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filter: Filter) {\n        if (this.#filters.has(filter.name)) {\n            throw new Error(`Filter with name ${filter.name} already in group ${this.name}. Filter names have to be unique in a Group.`);\n        }\n        this.#filters.set(filter.name, filter);\n    }\n\n    getFilterNames(): string[] {\n        return [...this.#filters.keys()];\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Filter {\n    #name: string;\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Item {\n    #data?: Pojo;\n    #groups = new Map<string, Set<string>>();\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n\n    getGroupNames(): Set<string> {\n        return new Set(this.#groups.keys());\n    }\n\n    addFilter(groupName: string, filterName: string) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    #getFiltersFromGroup(groupName: string) {\n        if (!this.#groups.has(groupName)) {\n            this.#groups.set(groupName, new Set());\n        }\n        return this.#groups.get(groupName);\n    }\n\n    getFilterNames(groupName: string): Set<string> {\n        if (this.#groups.has(groupName)) {\n            return new Set(this.#groups.get(groupName));\n        } else {\n            return new Set();\n        }\n    }\n}\n\nexport class FilterData {\n    #checkedFilters: Map<string, Set<string>> = new Map();\n\n    get checkedFilters() {\n        return this.#checkedFilters;\n    }\n\n    checkFilter(groupName: string, filterName: string): void {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    checkAllFilters(groupName: string): void {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.clear();\n    }\n\n    #getFiltersFromGroup(groupName: string): Set<string> {\n        if (!this.#checkedFilters.has(groupName)) {\n            this.#checkedFilters.set(groupName, new Set());\n        }\n        return this.#checkedFilters.get(groupName);\n    }\n\n    disableGroup(groupName: string): void {\n        this.#checkedFilters.delete(groupName);\n    }\n\n    clone(): FilterData {\n        const filterData = new FilterData();\n        for (const [groupName, filterNames] of this.#checkedFilters.entries()) {\n            for (const filterName of filterNames) {\n                filterData.checkFilter(groupName, filterName);\n            }\n        }\n        return filterData;\n    }\n}\n","import {Filter, FilterData, Group, Item, Schema} from \"./schema\";\n\nexport interface ParserOptions {\n    groupClass?: string,\n    filterClass?: string,\n    itemClass?: string,\n    itemFilterNameAttributePrefix?: string,\n    filterCheckedClass?: string,\n}\n\nexport class Parser {\n\n    static readonly #defaultOptions: ParserOptions = {\n        groupClass: 'filtering-group',\n        filterClass: 'filtering-filter',\n        itemClass: 'filtering-item',\n        itemFilterNameAttributePrefix: 'data-filter',\n        filterCheckedClass: 'checked',\n    }\n\n    readonly #options: ParserOptions;\n\n    constructor(options: ParserOptions = {}) {\n        this.#options = {...Parser.#defaultOptions, ...options};\n    }\n\n    get options(): ParserOptions {\n        return this.#options;\n    }\n\n    parseSchemaFromHtml(element: HTMLElement, schema: Schema = new Schema()) {\n        this.parseGroupsAndFiltersFromHtml(element, schema);\n        for (const item of this.parseItemsFromHtml(element)) {\n            schema.addItem(item);\n        }\n        return schema;\n    }\n\n    parseGroupsAndFiltersFromHtml(element: HTMLElement, schema: Schema) {\n        for (const groupElement of element.getElementsByClassName(this.#options.groupClass) as HTMLCollectionOf<HTMLElement>) {\n            const groupName = groupElement.dataset.groupName;\n            if (groupName === undefined) {\n                continue;\n            }\n            const group = new Group(groupName, {\n                element: groupElement,\n                label: groupElement.dataset.groupLabel,\n            });\n\n            for (const filterElement of groupElement.getElementsByClassName(this.#options.filterClass) as HTMLCollectionOf<HTMLElement>) {\n                const filterName = filterElement.dataset.filterName;\n                if (filterName === undefined) {\n                    continue;\n                }\n                const filter = new Filter(filterName, {\n                    element: filterElement,\n                    label: filterElement.dataset.filterLabel,\n                });\n\n                group.addFilter(filter);\n            }\n            schema.addGroup(group);\n        }\n    }\n\n    parseItemsFromHtml(element: HTMLElement) {\n        const items: Item[] = [];\n\n        const attributeRegex = new RegExp(`${this.#options.itemFilterNameAttributePrefix}-(?<groupName>.+)`, 'i');\n        for (const itemElement of element.getElementsByClassName(this.#options.itemClass) as HTMLCollectionOf<HTMLElement>) {\n            const item = new Item({\n                element: itemElement\n            });\n            for (const {name: attributeName, value: filterNames} of itemElement.attributes) {\n                const match = attributeName.match(attributeRegex);\n                if (match) {\n                    const {groupName} = match.groups;\n                    for (const filterName of filterNames.split(/\\s*,\\s*/)) {\n                        item.addFilter(groupName, filterName);\n                    }\n                }\n            }\n            items.push(item);\n        }\n        return items;\n    }\n\n    parseCheckedFilterDataFromHtml(element: HTMLElement) {\n        const filterData = new FilterData();\n        for (const groupElement of element.getElementsByClassName(this.#options.groupClass) as HTMLCollectionOf<HTMLElement>) {\n            const groupName = groupElement.dataset.groupName;\n\n            for (const filterElement of groupElement.getElementsByClassName(this.#options.filterClass) as HTMLCollectionOf<HTMLElement>) {\n                const filterName = filterElement.dataset.filterName;\n\n                if (filterElement.classList.contains(this.#options.filterCheckedClass)) {\n                    filterData.checkFilter(groupName, filterName);\n                }\n            }\n        }\n        return filterData;\n    }\n}\n","import {Schema} from \"./schema\";\nimport {Parser, ParserOptions} from \"./parser\";\nimport {Filtering, FilteringOptions} from \"./filtering\";\n\nexport class FilteringFlow {\n\n    readonly options: FilteringFlowOptions;\n    static readonly defaultOptions: FilteringFlowOptions = {\n        triggerFilterAfterInitializing: true,\n        disabledFilterClass: 'disabled',\n        filteredItemClass: 'filtered',\n    }\n\n    readonly root: HTMLElement;\n    schema: Schema;\n    parser: Parser;\n    filtering: Filtering;\n\n    constructor(root: HTMLElement, options: FilteringFlowOptions = {}) {\n        this.root = root;\n        this.options = {...FilteringFlow.defaultOptions, ...options};\n\n        this.initializeParser();\n        this.initializeSchema();\n        this.initializeFiltering();\n        this.initializeFilterListener();\n\n        if (this.options.triggerFilterAfterInitializing) {\n            this.filter();\n        }\n    }\n\n    initializeParser(parserOptions?: ParserOptions) {\n        this.parser = new Parser(parserOptions);\n        return this.parser;\n    }\n\n    initializeSchema() {\n        this.schema = this.parser.parseSchemaFromHtml(this.root);\n        return this.schema;\n    }\n\n    initializeFiltering(filteringOptions?: FilteringOptions) {\n        this.filtering = new Filtering(this.schema, filteringOptions);\n        return this.filtering;\n    }\n\n    initializeFilterListener() {\n        for (const filterElement of this.root.getElementsByClassName(this.parser.options.filterClass) as HTMLCollectionOf<HTMLElement>) {\n            filterElement.addEventListener('click', (event) => {\n                event.preventDefault();\n                if (filterElement.classList.contains(this.options.disabledFilterClass)) {\n                    // Ignore click if the filter would give 0 results\n                    return;\n                }\n                if (this.beforeFilter(filterElement)) {\n                    filterElement.classList.toggle(this.parser.options.filterCheckedClass); // Check or uncheck filter\n                    this.filter();\n                }\n            });\n        }\n    }\n\n    beforeFilter(filterElement: HTMLElement) {\n        return true;\n    }\n\n    filter() {\n        // Parse checked filter from HTML\n        const filterData = this.parser.parseCheckedFilterDataFromHtml(this.root);\n        const result = this.filtering.filter(filterData);\n        for (const group of result.groups) {\n            for (const filter of group.filters) {\n                const filterElement = filter.schemaFilter.data.element;\n                // Disable filter if it would give 0 results\n                filterElement.classList.toggle(this.options.disabledFilterClass, filter.possibleItems.length === 0);\n            }\n        }\n        for (const item of result.allItems) {\n            // Show or hide items\n            item.data.element.classList.toggle(this.options.filteredItemClass, !result.filteredItems.includes(item));\n        }\n        return result;\n    }\n}\n\ninterface FilteringFlowOptions {\n    disabledFilterClass?: string,\n    filteredItemClass?: string,\n    triggerFilterAfterInitializing?: boolean,\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Result","Map","constructor","schema","group","groups","groupResult","GroupResult","filter","filters","filterResult","FilterResult","addFilter","values","groupNames","keys","set","schemaGroup","name","getGroup","groupName","filteredItems","result","Set","item","add","addFilteredItem","getGroupNames","possibleItems","allItems","addAllItem","schemaFilter","getFilter","filterName","getFilterNames","addPossibleItem","findOne","haystack","v","has","Filtering","data","options","filterData","relevantItems","filterItem","items","push","possibleFilterData","clone","disableGroup","filteredItem","filteredItemFilterName","filtered","checkedFilters","size","Schema","addGroup","Error","addItem","addItems","Group","Filter","Item","FilterData","checkFilter","checkAllFilters","clear","delete","filterNames","entries","Parser","static","groupClass","filterClass","itemClass","itemFilterNameAttributePrefix","filterCheckedClass","parseSchemaFromHtml","element","parseGroupsAndFiltersFromHtml","parseItemsFromHtml","groupElement","getElementsByClassName","dataset","undefined","label","groupLabel","filterElement","filterLabel","attributeRegex","RegExp","itemElement","attributeName","attributes","match","split","parseCheckedFilterDataFromHtml","classList","contains","FilteringFlow","triggerFilterAfterInitializing","disabledFilterClass","filteredItemClass","parser","filtering","defaultOptions","initializeParser","initializeSchema","initializeFiltering","initializeFilterListener","parserOptions","filteringOptions","addEventListener","event","preventDefault","beforeFilter","toggle","length","includes"],"sourceRoot":""}
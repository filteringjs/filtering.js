{"version":3,"file":"index.js","mappings":"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","sources":["webpack://filteringjs/webpack/universalModuleDefinition","webpack://filteringjs/webpack/bootstrap","webpack://filteringjs/webpack/runtime/define property getters","webpack://filteringjs/webpack/runtime/hasOwnProperty shorthand","webpack://filteringjs/webpack/runtime/make namespace object","webpack://filteringjs/./src/result.ts","webpack://filteringjs/./src/utils.ts","webpack://filteringjs/./src/filtering.ts","webpack://filteringjs/./src/schema.ts","webpack://filteringjs/./src/parser.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"filteringjs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"filteringjs\"] = factory();\n\telse\n\t\troot[\"filteringjs\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Filter, Group, Item, Schema} from \"./schema\";\n\nexport class Result {\n    readonly #schema: Schema;\n    readonly #groups = new Map<string, GroupResult>();\n\n    #filteredItems = new Set<Item>();\n    #allItems = new Set<Item>();\n\n    constructor(schema: Schema) {\n        this.#schema = schema;\n    }\n\n    get schema(): Schema {\n        return this.#schema;\n    }\n\n    get groups(): GroupResult[] {\n        return [...this.#groups.values()];\n    }\n\n    get groupNames(): string[] {\n        return [...this.#groups.keys()];\n    }\n\n    addGroup(groupResult: GroupResult) {\n        this.#groups.set(groupResult.schemaGroup.name, groupResult);\n    }\n\n    getGroup(groupName: string) {\n        return this.#groups.get(groupName);\n    }\n\n    get filteredItems() {\n        return [...this.#filteredItems];\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addFilteredItem(item);\n        }\n    }\n\n    get allItems() {\n        return [...this.#allItems];\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addAllItem(item);\n        }\n    }\n}\n\nexport class GroupResult {\n    readonly #schemaGroup: Group;\n\n    #filters = new Map<string, FilterResult>();\n\n    #filteredItems = new Set<Item>();\n    #allItems = new Set<Item>();\n\n    constructor(schemaGroup: Group) {\n        this.#schemaGroup = schemaGroup;\n    }\n\n    get schemaGroup(): Group {\n        return this.#schemaGroup;\n    }\n\n    get filters(): FilterResult[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filterResult: FilterResult) {\n        this.#filters.set(filterResult.schemaFilter.name, filterResult);\n    }\n\n    getFilter(filterName: string) {\n        return this.#filters.get(filterName);\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addFilteredItem(item);\n        }\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addAllItem(item);\n        }\n    }\n}\n\nexport class FilterResult {\n    readonly #schemaFilter: Filter;\n\n    #filteredItems = new Set<Item>();\n    #possibleItems = new Set<Item>();\n    #allItems = new Set<Item>();\n\n    constructor(schemaFilter: Filter) {\n        this.#schemaFilter = schemaFilter;\n    }\n\n    get schemaFilter() {\n        return this.#schemaFilter;\n    }\n\n    get filteredItems() {\n        return [...this.#filteredItems];\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n    }\n\n    get possibleItems() {\n        return [...this.#possibleItems];\n    }\n\n    addPossibleItem(item: Item) {\n        this.#possibleItems.add(item);\n    }\n\n    get allItems() {\n        return [...this.#allItems];\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n    }\n}\n","export interface Pojo {\n    [key: string]: any;\n}\n\nexport function findOne<Type>(haystack: Set<Type>, values: Set<Type>) {\n    for (const v of values) {\n        if (haystack.has(v)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function emptyFn() {\n}\n\nexport function trueFn() {\n    return true;\n}\n","import {FilterData, Item, Schema} from \"./schema\";\nimport {FilterResult, GroupResult, Result} from \"./result\";\nimport {findOne} from \"./utils\";\n\nexport class Filtering {\n\n    private readonly schema: Schema;\n    private readonly options: FilteringOptions;\n\n    constructor(data: Schema, options = {}) {\n        this.schema = data;\n        this.options = options;\n    }\n\n    filter(filterData: FilterData): Result {\n        const result = this.createEmptyResult(this.schema);\n\n        let relevantItems: Item[] = [];\n        if (this.options.filterItem) {\n            for (const item of this.schema.items) {\n                if (this.options.filterItem(item, this.schema, filterData)) {\n                    relevantItems.push(item);\n                }\n            }\n        } else {\n            relevantItems = [...this.schema.items];\n        }\n        for (const item of relevantItems) {\n            result.addAllItem(item);\n        }\n        for (const item of this.getFilterItems(relevantItems, filterData)) {\n            result.addFilteredItem(item);\n        }\n        this.calculatePossibleItems(result, relevantItems, filterData);\n\n        return result;\n    }\n\n    private createEmptyResult(schema: Schema) {\n        const result = new Result(schema);\n        for (const group of schema.groups) {\n            const groupResult = new GroupResult(group);\n            for (const filter of group.filters) {\n                const filterResult = new FilterResult(filter);\n                groupResult.addFilter(filterResult);\n            }\n            result.addGroup(groupResult);\n        }\n        return result;\n    }\n\n    private calculatePossibleItems(result: Result, items: Item[], filterData: FilterData) {\n        for (const groupName of result.groupNames) {\n            const possibleFilterData = filterData.clone();\n            possibleFilterData.disableGroup(groupName);\n\n            const filteredItems = this.getFilterItems(items, possibleFilterData);\n            for (const filteredItem of filteredItems) {\n                for (const filteredItemFilterName of filteredItem.getFilterNames(groupName)) {\n                    result.getGroup(groupName).getFilter(filteredItemFilterName).addPossibleItem(filteredItem);\n                }\n            }\n        }\n    }\n\n    private getFilterItems(items: Item[], filterData: FilterData) {\n        const result = new Set<Item>();\n\n        for (const item of items) {\n            let filtered = true;\n\n            for (const [groupName, checkedFilters] of filterData.enabledFilters) {\n                if (checkedFilters.size > 0 && !findOne(item.getFilterNames(groupName), checkedFilters)) {\n                    filtered = false;\n                    break;\n                }\n            }\n\n            if (filtered) {\n                result.add(item);\n            }\n        }\n\n        return result;\n    }\n}\n\ninterface FilteringOptions {\n    filterItem?(item: Item, schema: Schema, filterData: FilterData): boolean,\n}\n","import {Pojo} from \"./utils\";\n\nexport class Schema {\n    #groups: Map<string, Group> = new Map();\n    #items: Item[] = [];\n    #data?: Pojo;\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get groups(): Group[] {\n        return [...this.#groups.values()];\n    }\n\n    get items(): Item[] {\n        return this.#items;\n    }\n\n    addGroup(group: Group) {\n        if (this.#groups.has(group.name)) {\n            throw new Error(`Group with name ${group.name} already added to schema. Group names have to be unique.`);\n        }\n        this.#groups.set(group.name, group);\n    }\n\n    addItem(item: Item) {\n        this.#items.push(item);\n    }\n\n    addItems(items: Item[]) {\n        for (const item of items) {\n            this.addItem(item);\n        }\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Group {\n    #name: string;\n    #filters: Map<string, Filter> = new Map();\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get filters(): Filter[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filter: Filter) {\n        if (this.#filters.has(filter.name)) {\n            throw new Error(`Filter with name ${filter.name} already in group ${this.name}. Filter names have to be unique in a Group.`);\n        }\n        this.#filters.set(filter.name, filter);\n    }\n\n    getFilterNames() {\n        return new Set(this.#filters.keys());\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Filter {\n    #name: string;\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Item {\n    #data?: Pojo;\n    #groups = new Map<string, Set<string>>();\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n\n    getGroupNames(): Set<string> {\n        return new Set(this.#groups.keys());\n    }\n\n    addFilter(groupName: string, filterName: string) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    #getFiltersFromGroup(groupName: string) {\n        if (!this.#groups.has(groupName)) {\n            this.#groups.set(groupName, new Set());\n        }\n        return this.#groups.get(groupName);\n    }\n\n    getFilterNames(groupName: string): Set<string> {\n        if (this.#groups.has(groupName)) {\n            return new Set(this.#groups.get(groupName));\n        } else {\n            return new Set();\n        }\n    }\n}\n\nexport class FilterData {\n    #enabledFilter: Map<string, Set<string | Symbol>> = new Map();\n\n    get enabledGroups() {\n        return this.#enabledFilter.keys();\n    }\n\n    get enabledFilters() {\n        return this.#enabledFilter;\n    }\n\n    enableFilter(groupName: string, filterName: string | Symbol) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    enableAllFilter(groupName: string) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.clear();\n    }\n\n    #getFiltersFromGroup(groupName: string) {\n        if (!this.#enabledFilter.has(groupName)) {\n            this.#enabledFilter.set(groupName, new Set());\n        }\n        return this.#enabledFilter.get(groupName);\n    }\n\n    enableGroup(groupName: string) {\n        this.#enabledFilter.delete(groupName);\n        this.enableAllFilter(groupName);\n    }\n\n    disableGroup(groupName: string) {\n        this.#enabledFilter.delete(groupName);\n    }\n\n    clone() {\n        const filterData = new FilterData();\n        for (const [groupName, filterNames] of this.#enabledFilter.entries()) {\n            for (const filterName of filterNames) {\n                filterData.enableFilter(groupName, filterName);\n            }\n        }\n        return filterData;\n    }\n}\n","import {Filter, FilterData, Group, Item, Schema} from \"./schema\";\n\nexport interface ParseSchemaOptions {\n    groupClass: string,\n    filterClass: string,\n    itemClass: string,\n    itemFilterNameAttributePrefix: string,\n    filterEnabledClass: string,\n}\n\nexport class FilteringParser {\n\n    static readonly #defaultOptions: ParseSchemaOptions = {\n        groupClass: 'filtering-group',\n        filterClass: 'filtering-filter',\n        itemClass: 'filtering-item',\n        itemFilterNameAttributePrefix: 'data-filter',\n        filterEnabledClass: 'enabled',\n    }\n\n    readonly #options: ParseSchemaOptions;\n\n    constructor(options?: ParseSchemaOptions | {}) {\n        this.#options = {...FilteringParser.#defaultOptions, ...options};\n    }\n\n    parseSchemaFromHtml(element: HTMLElement, schema: Schema = new Schema()) {\n        this.parseGroupsAndFiltersFromHtml(element, schema);\n        for (const item of this.parseItemsFromHtml(element)) {\n            schema.addItem(item);\n        }\n        return schema;\n    }\n\n    parseGroupsAndFiltersFromHtml(element: HTMLElement, schema: Schema) {\n        const groupElements = [...element.querySelectorAll(`.${this.#options.groupClass}`)] as HTMLElement[];\n        for (const groupElement of groupElements) {\n            const groupName = groupElement.dataset.groupName;\n            if (groupName === undefined) {\n                continue;\n            }\n            const group = new Group(groupName, {\n                element: groupElement,\n                label: groupElement.dataset.groupLabel,\n            });\n\n            const filterElements = [...groupElement.querySelectorAll(`.${this.#options.filterClass}`)] as HTMLElement[];\n            for (const filterElement of filterElements) {\n                const filterName = filterElement.dataset.filterName;\n                if (filterName === undefined) {\n                    continue;\n                }\n                const filter = new Filter(filterName, {\n                    element: filterElement,\n                    label: filterElement.dataset.filterLabel,\n                });\n\n                group.addFilter(filter);\n            }\n            schema.addGroup(group);\n        }\n    }\n\n    parseItemsFromHtml(element: HTMLElement) {\n        const items: Item[] = [];\n\n        const attributeRegex = new RegExp(`${this.#options.itemFilterNameAttributePrefix}-(?<groupName>.+)`, 'i');\n        const itemElements = [...element.querySelectorAll(`.${this.#options.itemClass}`)] as HTMLElement[];\n        for (const itemElement of itemElements) {\n            const item = new Item({\n                element: itemElement\n            });\n            for (const {name: attributeName, value: filterNames} of itemElement.attributes) {\n                const match = attributeName.match(attributeRegex);\n                if (match) {\n                    const {groupName} = match.groups;\n                    for (const filterName of filterNames.split(/\\s*,\\s*/)) {\n                        item.addFilter(groupName, filterName);\n                    }\n                }\n            }\n            items.push(item);\n        }\n        return items;\n    }\n\n    parseEnabledFilterDataFromHtml(element: HTMLElement) {\n        const filterData = new FilterData();\n        const groupElements = [...element.querySelectorAll(`.${this.#options.groupClass}`)] as HTMLElement[];\n        for (const groupElement of groupElements) {\n            const groupName = groupElement.dataset.groupName;\n\n            const filterElements = [...groupElement.querySelectorAll(`.${this.#options.filterClass}`)] as HTMLElement[];\n            for (const filterElement of filterElements) {\n                const filterName = filterElement.dataset.filterName;\n\n                if (filterElement.classList.contains(this.#options.filterEnabledClass)) {\n                    filterData.enableFilter(groupName, filterName);\n                }\n            }\n        }\n        return filterData;\n    }\n}\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Result","Map","Set","constructor","schema","groups","values","groupNames","keys","addGroup","groupResult","set","schemaGroup","name","getGroup","groupName","filteredItems","addFilteredItem","item","add","getGroupNames","allItems","addAllItem","GroupResult","filters","addFilter","filterResult","schemaFilter","getFilter","filterName","getFilterNames","FilterResult","possibleItems","addPossibleItem","findOne","haystack","v","has","Filtering","options","data","filter","filterData","result","createEmptyResult","relevantItems","filterItem","items","push","getFilterItems","calculatePossibleItems","group","possibleFilterData","clone","disableGroup","filteredItem","filteredItemFilterName","filtered","checkedFilters","enabledFilters","size","Schema","Error","addItem","addItems","Group","Filter","Item","FilterData","enabledGroups","enableFilter","enableAllFilter","clear","enableGroup","delete","filterNames","entries","FilteringParser","static","groupClass","filterClass","itemClass","itemFilterNameAttributePrefix","filterEnabledClass","parseSchemaFromHtml","element","parseGroupsAndFiltersFromHtml","parseItemsFromHtml","groupElements","querySelectorAll","groupElement","dataset","undefined","label","groupLabel","filterElements","filterElement","filterLabel","attributeRegex","RegExp","itemElements","itemElement","attributeName","attributes","match","split","parseEnabledFilterDataFromHtml","classList","contains"],"sourceRoot":""}
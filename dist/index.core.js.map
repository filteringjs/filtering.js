{"version":3,"file":"index.core.js","mappings":"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","sources":["webpack://filteringjs/webpack/universalModuleDefinition","webpack://filteringjs/webpack/bootstrap","webpack://filteringjs/webpack/runtime/define property getters","webpack://filteringjs/webpack/runtime/hasOwnProperty shorthand","webpack://filteringjs/webpack/runtime/make namespace object","webpack://filteringjs/./src/result.ts","webpack://filteringjs/./src/utils.ts","webpack://filteringjs/./src/filtering.ts","webpack://filteringjs/./src/schema.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"filteringjs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"filteringjs\"] = factory();\n\telse\n\t\troot[\"filteringjs\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {Filter, Group, Item, Schema} from \"./schema\";\n\nexport class Result {\n    readonly #schema: Schema;\n    readonly #groups = new Map<string, GroupResult>();\n\n    constructor(schema: Schema) {\n        this.#schema = schema;\n\n        this.#initialize();\n    }\n\n    #initialize() {\n        for (const group of this.schema.groups) {\n            const groupResult = new GroupResult(group);\n            for (const filter of group.filters) {\n                const filterResult = new FilterResult(filter);\n                groupResult.addFilter(filterResult);\n            }\n            this.#addGroup(groupResult);\n        }\n    }\n\n    get schema(): Schema {\n        return this.#schema;\n    }\n\n    get groups(): GroupResult[] {\n        return [...this.#groups.values()];\n    }\n\n    get groupNames(): string[] {\n        return [...this.#groups.keys()];\n    }\n\n    #addGroup(groupResult: GroupResult) {\n        this.#groups.set(groupResult.schemaGroup.name, groupResult);\n    }\n\n    getGroup(groupName: string) {\n        return this.#groups.get(groupName);\n    }\n\n    get filteredItems(): Item[] {\n        const result = new Set<Item>();\n        for (const groupResult of this.groups) {\n            for (const item of groupResult.filteredItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addFilteredItem(item: Item) {\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addFilteredItem(item);\n        }\n    }\n\n    get allItems() {\n        const result = new Set<Item>();\n        for (const groupResult of this.groups) {\n            for (const item of groupResult.allItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addAllItem(item: Item) {\n        for (const groupName of item.getGroupNames()) {\n            const groupResult = this.#groups.get(groupName);\n            groupResult.addAllItem(item);\n        }\n    }\n}\n\nexport class GroupResult {\n    readonly #schemaGroup: Group;\n\n    readonly #filters = new Map<string, FilterResult>();\n\n    constructor(schemaGroup: Group) {\n        this.#schemaGroup = schemaGroup;\n    }\n\n    get schemaGroup(): Group {\n        return this.#schemaGroup;\n    }\n\n    get filters(): FilterResult[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filterResult: FilterResult) {\n        this.#filters.set(filterResult.schemaFilter.name, filterResult);\n    }\n\n    getFilter(filterName: string) {\n        return this.#filters.get(filterName);\n    }\n\n    get filteredItems(): Item[] {\n        const result = new Set<Item>();\n        for (const filterResult of this.filters) {\n            for (const item of filterResult.filteredItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addFilteredItem(item: Item) {\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addFilteredItem(item);\n        }\n    }\n\n    get allItems(): Item[] {\n        const result = new Set<Item>();\n        for (const filterResult of this.filters) {\n            for (const item of filterResult.allItems) {\n                result.add(item);\n            }\n        }\n        return [...result];\n    }\n\n    addAllItem(item: Item) {\n        for (const filterName of item.getFilterNames(this.schemaGroup.name)) {\n            const filterResult = this.#filters.get(filterName);\n            filterResult.addAllItem(item);\n        }\n    }\n}\n\nexport class FilterResult {\n    readonly #schemaFilter: Filter;\n\n    readonly #filteredItems = new Set<Item>();\n    readonly #possibleItems = new Set<Item>();\n    readonly #allItems = new Set<Item>();\n\n    constructor(schemaFilter: Filter) {\n        this.#schemaFilter = schemaFilter;\n    }\n\n    get schemaFilter() {\n        return this.#schemaFilter;\n    }\n\n    get filteredItems() {\n        return [...this.#filteredItems];\n    }\n\n    addFilteredItem(item: Item) {\n        this.#filteredItems.add(item);\n        this.addPossibleItem(item);\n        this.addAllItem(item);\n    }\n\n    get possibleItems() {\n        return [...this.#possibleItems];\n    }\n\n    addPossibleItem(item: Item) {\n        this.#possibleItems.add(item);\n        this.addAllItem(item);\n    }\n\n    get allItems() {\n        return [...this.#allItems];\n    }\n\n    addAllItem(item: Item) {\n        this.#allItems.add(item);\n    }\n}\n","export interface Pojo {\n    [key: string]: any;\n}\n\nexport function findOne<Type>(haystack: Set<Type>, values: Set<Type>) {\n    for (const v of values) {\n        if (haystack.has(v)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function getProperty(object: any, propertyName: string): any {\n    const parts = propertyName.split('.');\n    let result = object;\n    for (const part of parts) {\n        if (result === undefined) {\n            return undefined;\n        }\n        result = result[part];\n    }\n    return result;\n}\n","import {Item, Schema} from \"./schema\";\nimport {Result} from \"./result\";\nimport {findOne} from \"./utils\";\n\nexport class Filtering {\n\n    readonly #schema: Schema;\n    readonly #options: FilteringOptions;\n\n    constructor(data: Schema, options: FilteringOptions = {}) {\n        this.#schema = data;\n        this.#options = options;\n    }\n\n    get schema(): Schema {\n        return this.#schema;\n    }\n\n    get options(): FilteringOptions {\n        return this.#options;\n    }\n\n    filter(filterData: FilterData): Result {\n        const result = new Result(this.#schema);\n\n        let relevantItems: Item[] = [];\n        if (this.#options.filterItem) {\n            for (const item of this.#schema.items) {\n                if (this.#options.filterItem(item, this.#schema, filterData)) {\n                    relevantItems.push(item);\n                }\n            }\n        } else {\n            relevantItems = [...this.#schema.items];\n        }\n        for (const item of relevantItems) {\n            result.addAllItem(item);\n        }\n        for (const item of this.#getFilterItems(relevantItems, filterData)) {\n            result.addFilteredItem(item);\n        }\n        this.#calculatePossibleItems(result, relevantItems, filterData);\n\n        return result;\n    }\n\n    #calculatePossibleItems(result: Result, items: Item[], filterData: FilterData) {\n        for (const groupName of result.groupNames) {\n            const possibleFilterData = filterData.clone();\n            possibleFilterData.disableGroup(groupName);\n\n            const filteredItems = this.#getFilterItems(items, possibleFilterData);\n            for (const filteredItem of filteredItems) {\n                for (const filteredItemFilterName of filteredItem.getFilterNames(groupName)) {\n                    result.getGroup(groupName).getFilter(filteredItemFilterName).addPossibleItem(filteredItem);\n                }\n            }\n        }\n    }\n\n    #getFilterItems(items: Item[], filterData: FilterData) {\n        const result = new Set<Item>();\n\n        for (const item of items) {\n            let filtered = true;\n\n            for (const [groupName, checkedFilters] of filterData.checkedFilters) {\n                if (checkedFilters.size > 0 && !findOne(item.getFilterNames(groupName), checkedFilters)) {\n                    filtered = false;\n                    break;\n                }\n            }\n\n            if (filtered) {\n                result.add(item);\n            }\n        }\n\n        return result;\n    }\n}\n\nexport interface FilteringOptions {\n    filterItem?(item: Item, schema: Schema, filterData: FilterData): boolean,\n}\n\nexport class FilterData {\n    #checkedFilters: Map<string, Set<string>> = new Map();\n    #disabledGroups: Set<string> = new Set();\n\n    get checkedFilters() {\n        return this.#checkedFilters;\n    }\n\n    checkFilter(groupName: string, filterName: string): void {\n        if (this.#disabledGroups.has(groupName)) {\n            return;\n        }\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    #getFiltersFromGroup(groupName: string): Set<string> {\n        if (!this.#checkedFilters.has(groupName)) {\n            this.#checkedFilters.set(groupName, new Set());\n        }\n        return this.#checkedFilters.get(groupName);\n    }\n\n    disableGroup(groupName: string): void {\n        this.#disabledGroups.add(groupName);\n        this.#checkedFilters.delete(groupName);\n    }\n\n    clone(): FilterData {\n        const filterData = new FilterData();\n        for (const [groupName, filterNames] of this.#checkedFilters.entries()) {\n            for (const filterName of filterNames) {\n                filterData.checkFilter(groupName, filterName);\n            }\n        }\n        for (const groupName of this.#disabledGroups) {\n            filterData.disableGroup(groupName);\n        }\n        return filterData;\n    }\n}\n","import {Pojo} from \"./utils\";\n\nexport class Schema {\n    #groups: Map<string, Group> = new Map();\n    #items: Item[] = [];\n    #data?: Pojo;\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get groups(): Group[] {\n        return [...this.#groups.values()];\n    }\n\n    get items(): Item[] {\n        return this.#items;\n    }\n\n    addGroup(group: Group) {\n        if (this.#groups.has(group.name)) {\n            throw new Error(`Group with name ${group.name} already added to schema. Group names have to be unique.`);\n        }\n        this.#groups.set(group.name, group);\n    }\n\n    addItem(item: Item) {\n        this.#items.push(item);\n    }\n\n    addItems(items: Iterable<Item>) {\n        for (const item of items) {\n            this.addItem(item);\n        }\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Group {\n    #name: string;\n    #filters: Map<string, Filter> = new Map();\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get filters(): Filter[] {\n        return [...this.#filters.values()];\n    }\n\n    addFilter(filter: Filter) {\n        if (this.#filters.has(filter.name)) {\n            throw new Error(`Filter with name ${filter.name} already in group ${this.name}. Filter names have to be unique in a Group.`);\n        }\n        this.#filters.set(filter.name, filter);\n    }\n\n    getFilterNames(): string[] {\n        return [...this.#filters.keys()];\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Filter {\n    #name: string;\n    #data?: Pojo;\n\n    constructor(name: string, data?: Pojo) {\n        this.#name = name;\n        this.#data = data;\n    }\n\n\n    get name(): string {\n        return this.#name;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n}\n\nexport class Item {\n    #data?: Pojo;\n    #groups = new Map<string, Set<string>>();\n\n    constructor(data?: Pojo) {\n        this.#data = data;\n    }\n\n    get data(): Pojo {\n        return this.#data;\n    }\n\n    getGroupNames(): Set<string> {\n        return new Set(this.#groups.keys());\n    }\n\n    addFilter(groupName: string, filterName: string) {\n        const filters = this.#getFiltersFromGroup(groupName);\n        filters.add(filterName);\n    }\n\n    #getFiltersFromGroup(groupName: string) {\n        if (!this.#groups.has(groupName)) {\n            this.#groups.set(groupName, new Set());\n        }\n        return this.#groups.get(groupName);\n    }\n\n    getFilterNames(groupName: string): Set<string> {\n        if (this.#groups.has(groupName)) {\n            return new Set(this.#groups.get(groupName));\n        } else {\n            return new Set();\n        }\n    }\n}\n\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","Result","Map","constructor","schema","group","groups","groupResult","GroupResult","filter","filters","filterResult","FilterResult","addFilter","values","groupNames","keys","set","schemaGroup","name","getGroup","groupName","filteredItems","result","Set","item","add","addFilteredItem","getGroupNames","allItems","addAllItem","schemaFilter","getFilter","filterName","getFilterNames","addPossibleItem","possibleItems","findOne","haystack","v","has","Filtering","data","options","filterData","relevantItems","filterItem","items","push","possibleFilterData","clone","disableGroup","filteredItem","filteredItemFilterName","filtered","checkedFilters","size","FilterData","checkFilter","delete","filterNames","entries","Schema","addGroup","Error","addItem","addItems","Group","Filter","Item"],"sourceRoot":""}